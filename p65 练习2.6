#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
using namespace std;

template<typename Type>
inline Type max(Type& i1, Type& i2)
{
	return (i1 > i2 ? i1 : i2);
}
//inline float max(float f1, float f2)
//{
//	return (f1 > f2 ? f1 : f2);
//}
//inline string max(string& str1, string& str2)
//{
//	return (str1 > str2 ? str1 : str2);
//}

template<typename elemType>
inline elemType max(const vector<elemType>& vec)
{
	return *max_element(vec.begin(), vec.end());
}
//inline float max(vector<float>& vec)
//{
//	return *max_element(vec.begin(), vec.end());
//}
//inline string max(vector<string>& vec)
//{
//	return *max_element(vec.begin(), vec.end());
//}

template<typename arrayType>
inline arrayType max(const arrayType* parray, int size)
{
	return *max_element(parray, parray + size);
}
//inline float max(const float* parray, int size)
//{
//	return *max_element(parray, parray + size);
//}
//inline string max(const string* parray, int size)
//{
//	return *max_element(parray, parray + size);
//}

int main()
{
	string sarray[] = { "we", "were", "her", "pride", "of", "ten" };
	vector<string> svec(sarray, sarray + 6);

	int iarray[] = { 12, 70, 2, 169, 1, 5, 29 };
	vector<int> ivec(iarray, iarray + 7);

	float farray[] = { 2.5, 24.8, 18.7, 4.1, 23.9 };
	vector<float> fvec(farray, farray + 5);

	int imax = max(max(ivec), max(iarray, 7));
	float fmax = max(max(fvec), max(farray, 5));
	string smax = max(max(svec), max(sarray,6));

	cout << imax
		<< '\n' << fmax
		<< '\n' << smax << endl;
	return 0;
}
